@page "/dashboard"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Dashboard</PageTitle>
<h3>SignalR Dashboard</h3>

@if (!IsConnected)
{
    <div>
        <p>Connecting...</p>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
        @logs
    </textarea>
}

@code {
    private Guid dashboardId = Guid.NewGuid();
    private HubConnection? hubConnection;
    private string logs = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{BlazorChatSignalR.Shared.Dashboard.DASHBOARD_HUB_URI}?{BlazorChatSignalR.Shared.Dashboard.DASHBOARD_ID_ARGUMENT}={dashboardId}"))
            .Build();

        hubConnection.On<string>(methodName: BlazorChatSignalR.Shared.Dashboard.DASHBOARD_LOG_METHOD_NAME, handler: (message) =>
        {
            if (string.IsNullOrEmpty(message))
            {
                throw new ArgumentNullException("message parameter was null");
            }
            logs += message + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        hubConnection.On<string>(
            methodName: BlazorChatSignalR.Shared.Dashboard.DASHBOARD_UPDATE_METHOD_NAME,
            handler: (message) =>
            {
                if (string.IsNullOrEmpty(message))
                {
                    throw new ArgumentNullException("message parameter was null");
                }
                logs += message + "\n";
                JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
                StateHasChanged();
            }
        );

        await hubConnection.StartAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await Connect();
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
